var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';
/**
 * @name Chooser
 * @description
 * File chooser plugin for Cordova.
 *
 * The following must be added to config.xml to prevent crashing when selecting large files on Android:
 * ```xml
 * <platform name="android">
 *  <edit-config
 *    file="app/src/main/AndroidManifest.xml"
 *    mode="merge"
 *    target="/manifest/application">
 *    <application android:largeHeap="true" />
 *  </edit-config>
 * </platform>
 * ```
 *
 * @usage
 * ```typescript
 * import { Chooser } from '@ionic-native/chooser';
 *
 *
 * constructor(private chooser: Chooser) { }
 *
 * ...
 *
 *
 * this.chooser.getFile()
 *   .then(file => console.log(file ? file.name : 'canceled'))
 *   .catch((error: any) => console.error(error));
 *
 * ```
 *
 * @interfaces
 * ChooserResult
 */
var Chooser = (function (_super) {
    __extends(Chooser, _super);
    function Chooser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Displays native prompt for user to select a file.
     * @param {string} [accept] Optional MIME type filter (e.g. 'image/gif,video/*').
     * @return {Promise<any>} Promise containing selected file's raw binary data,
     * base64-encoded data: URI, MIME type, display name, and original URI.
     */
    /**
       * Displays native prompt for user to select a file.
       * @param {string} [accept] Optional MIME type filter (e.g. 'image/gif,video/*').
       * @return {Promise<any>} Promise containing selected file's raw binary data,
       * base64-encoded data: URI, MIME type, display name, and original URI.
       */
    Chooser.prototype.getFile = /**
       * Displays native prompt for user to select a file.
       * @param {string} [accept] Optional MIME type filter (e.g. 'image/gif,video/*').
       * @return {Promise<any>} Promise containing selected file's raw binary data,
       * base64-encoded data: URI, MIME type, display name, and original URI.
       */
    function (accept) {
        return;
    };
    Chooser.decorators = [
        { type: Injectable },
    ];
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], Chooser.prototype, "getFile", null);
    /**
     * @name Chooser
     * @description
     * File chooser plugin for Cordova.
     *
     * The following must be added to config.xml to prevent crashing when selecting large files on Android:
     * ```xml
     * <platform name="android">
     *  <edit-config
     *    file="app/src/main/AndroidManifest.xml"
     *    mode="merge"
     *    target="/manifest/application">
     *    <application android:largeHeap="true" />
     *  </edit-config>
     * </platform>
     * ```
     *
     * @usage
     * ```typescript
     * import { Chooser } from '@ionic-native/chooser';
     *
     *
     * constructor(private chooser: Chooser) { }
     *
     * ...
     *
     *
     * this.chooser.getFile()
     *   .then(file => console.log(file ? file.name : 'canceled'))
     *   .catch((error: any) => console.error(error));
     *
     * ```
     *
     * @interfaces
     * ChooserResult
     */
    Chooser = __decorate([
        Plugin({
            pluginName: 'Chooser',
            plugin: 'cordova-plugin-chooser',
            pluginRef: 'chooser',
            repo: 'https://github.com/cyph/cordova-plugin-chooser',
            platforms: ['Android', 'iOS']
        })
    ], Chooser);
    return Chooser;
}(IonicNativePlugin));
export { Chooser };
//# sourceMappingURL=index.js.map